#include "aesfunctions.h"

Vector AesFunctions::RCON = AesFunctions::initRCON();
Vector AesFunctions::SBOX = AesFunctions::initSBOX();

Vector AesFunctions::initRCON() {
	unsigned int Rcon[] =
	{
		0x8d, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
	};
	Vector aux(Rcon,Rcon + sizeof(Rcon) / sizeof(long));
	return aux;
}

Vector AesFunctions::initSBOX() {
	int s[] =
	{
	   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
	};
	Vector aux(s,s + sizeof(s) / sizeof(long));
	return aux;
}

Bitset AesFunctions::SubBytes(const Bitset original, const int size) {
	//Por cada palabra del bitset dividirla en dos mitades y obtener el valor de SBOX
	string aux = "";
	int time = size / 8;
	for (int i = 0; i < 4; i++) {
		Bitset byte = original.subset((4-i-1)*8,8);
		unsigned long high = byte.subset(4,4).to_ul();
		unsigned long low = byte.subset(0,4).to_ul();
		aux += padZeros(int2bin(SBOX[high*16+low]),8);
	}
	return Bitset(aux);
}

BitsetMatrix AesFunctions::SubBytes(const BitsetMatrix original) {
	BitsetMatrix nueva = original;
	//Porcada columna del bitset original modificarla llamando a SubBytes
	for (int i = 0; i < nueva.get_columns(); i++) {
		nueva.set_column(i,SubBytes(nueva[i]));
	}
	return nueva;
}

BitsetMatrix AesFunctions::ShiftRows(const BitsetMatrix original) {
	BitsetMatrix nueva = original;
	//Primera fila igual, segunda 1 rot izquierda, tercera 2 y cuarta 3
	for (int i = 0; i < nueva.get_rows(); i++) {
		nueva.rotate_row(i,i);
	}
	return nueva;
}

BitsetMatrix AesFunctions::MixColumns(const BitsetMatrix original) {
	BitsetMatrix result(original.get_rows(),original.get_columns());
	//Ahora para cada columna de original aplicar el MixColumns del guion
	for (int col = 0; col < original.get_columns(); col++) {
		Bitset columna = original[col];
		string mixed = "";
		for (int i = 0; i < 4; i++) {
			Bitset palabra = columna.subset(columna.size()-(i+1)*8,8);
			int h = palabra[palabra.size() -1];
			palabra.shiftSelf(1);
			if (h == 1) {
				palabra = palabra ^ Bitset(AesFunctions::hex2bin("1b"));
			}
			mixed += palabra.to_s();
		}
		Bitset columna_mod(mixed);
		Bitset r0 = (columna_mod.subset(24,8)^columna.subset(0,8)^columna.subset(8,8)^columna_mod.subset(16,8)^columna.subset(16,8));
		Bitset r1 = (columna_mod.subset(16,8)^columna.subset(24,8)^columna.subset(0,8)^columna_mod.subset(8,8)^columna.subset(8,8));
		Bitset r2 = (columna_mod.subset(8,8)^columna.subset(16,8)^columna.subset(24,8)^columna_mod.subset(0,8)^columna.subset(0,8));
		Bitset r3 = (columna_mod.subset(0,8)^columna.subset(8,8)^columna.subset(16,8)^columna_mod.subset(24,8)^columna.subset(24,8));
		result.set_column(col,(r0.to_s()+r1.to_s()+r2.to_s()+r3.to_s()));
	}
	return result;
}

BitsetMatrix AesFunctions::AddRoundKey(const BitsetMatrix original, const BitsetMatrix clave) {
	BitsetMatrix result(original.get_rows(),original.get_columns());
	for (int i = 0; i < original.get_columns(); i++) {
		result.set_column(i,( original[i] ^ clave[i] ));
	}
	return result;
}

string AesFunctions::padZeros(const string str, const int length) {
	if (str.length() == length)
		return str;
	else {
		string res = str;
		for (int i = 0; i < (length - str.length()); i++)
			res = "0" + res;
		return res;
	}
}

string AesFunctions::hex2bin(string hex) {
	string bin = "";
	for (int i = 0; i < hex.length(); i++) {
		switch (hex[i])
		{
			case '0': bin += ("0000"); break;
			case '1': bin += ("0001"); break;
			case '2': bin += ("0010"); break;
			case '3': bin += ("0011"); break;
			case '4': bin +=  ("0100"); break;
			case '5': bin +=  ("0101"); break;
			case '6': bin +=  ("0110"); break;
			case '7': bin +=  ("0111"); break;
			case '8': bin +=  ("1000"); break;
			case '9': bin +=  ("1001"); break;
			case 'a': bin +=  ("1010"); break;
			case 'b': bin +=  ("1011"); break;
			case 'c': bin +=  ("1100"); break;
			case 'd': bin +=  ("1101"); break;
			case 'e': bin +=  ("1110"); break;
			case 'f': bin +=  ("1111"); break;
		}
	}
	return bin;
}

string AesFunctions::int2bin(unsigned int number) {
	if ( number == 0 ) return "0";
	if ( number == 1 ) return "1";

	if ( number % 2 == 0 )
		return int2bin(number / 2) + "0";
	else
		return int2bin(number / 2) + "1";
}

string AesFunctions::processString(string cad) {
	try {
		regex bin_rx("^[0,1]{128}$");
		regex hex_rx("^[\\d,a-f]{32}$");
		if (regex_match(cad,bin_rx))
			return cad;
		else if (regex_match(cad,hex_rx))
			return AesFunctions::hex2bin(cad);
		else if (cad.length() <= 16) {
			//Se trata de texto plano (longitud 8 caracteres maxima)
			string aux_cad = "";
			for (int i = 0; i < cad.length(); i++) {
				//Convertir cada byte a binario
				aux_cad += AesFunctions::padZeros(AesFunctions::int2bin((int)cad[i]),8);
			}
			//Si es menor de 8 rellenar con \0
			for (int i = cad.length(); i < 8; i++) {
				aux_cad += AesFunctions::padZeros(AesFunctions::int2bin((int)'\0'),8);
			}
			return aux_cad;
		}
		else {
			//Lanzar excepcion
			throw 1;
		}
	}
	catch (int exception) {
		cout << "Error: La clave ha de ser 128 bits, 32 digitos hexadecimales o texto de longitud maxima 16" << endl;
		exit(1);
	}
}
